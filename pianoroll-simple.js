document.addEventListener('DOMContentLoaded', () => {
    // Éléments du DOM
    const canvas = document.getElementById('notes-canvas');
    const keyboard = document.getElementById('keyboard');
    const startButton = document.getElementById('start');
    const stopButton = document.getElementById('stop');
    const twinkleButton = document.getElementById('twinkle');
    const jingleButton = document.getElementById('jingle');
    const happyButton = document.getElementById('happy');
    const scoreDisplay = document.getElementById('score-value');
    const playerTab = document.getElementById('player-tab');
    
    // Variables globales
    let ctx = canvas ? canvas.getContext('2d') : null;
    let pianoKeys = {};
    let activeNotes = [];
    let isPlaying = false;
    let animationId = null;
    let lastTime = 0;
    let score = 0;
    let currentMelodyName = null;
    let melody = null; // Ajouter une variable globale pour la mélodie actuelle
    
    // Configuration
    const config = {
        noteSpeed: 2, // pixels par frame
        speedMultiplier: 1.0, // Multiplicateur de vitesse ajouté
        noteHeight: 80,
        noteColors: {
            'C': '#FF5252', // Rouge
            'C#': '#FF7043', // Orange-Rouge
            'D': '#FFCA28', // Jaune
            'D#': '#9CCC65', // Vert clair
            'E': '#66BB6A', // Vert
            'F': '#26C6DA', // Cyan
            'F#': '#42A5F5', // Bleu clair
            'G': '#5C6BC0', // Indigo
            'G#': '#7E57C2', // Violet
            'A': '#EC407A', // Rose
            'A#': '#AB47BC', // Violet-Rose
            'B': '#EF5350'  // Rouge-Orange
        }
    };
    
    // Mélodies prédéfinies
    const melodies = {
        twinkle: {
            name: 'Twinkle Twinkle Little Star',
            tempo: 120,
            notes: [
                ['C4', 500], ['C4', 500], ['G4', 500], ['G4', 500], ['A4', 500], ['A4', 500], ['G4', 1000],
                ['F4', 500], ['F4', 500], ['E4', 500], ['E4', 500], ['D4', 500], ['D4', 500], ['C4', 1000],
                ['G4', 500], ['G4', 500], ['F4', 500], ['F4', 500], ['E4', 500], ['E4', 500], ['D4', 1000]
            ]
        },
        jingle: {
            name: 'Jingle Bells',
            tempo: 140,
            notes: [
                ['E4', 400], ['E4', 400], ['E4', 800], ['E4', 400], ['E4', 400], ['E4', 800],
                ['E4', 400], ['G4', 400], ['C4', 400], ['D4', 400], ['E4', 1600],
                ['F4', 400], ['F4', 400], ['F4', 400], ['F4', 400], ['F4', 400], ['E4', 400], ['E4', 400], ['E4', 200], ['E4', 200],
                ['E4', 400], ['D4', 400], ['D4', 400], ['E4', 400], ['D4', 800], ['G4', 800]
            ]
        },
        happy: {
            name: 'Happy Birthday',
            tempo: 100,
            notes: [
                ['C4', 300], ['C4', 200], ['D4', 500], ['C4', 500], ['F4', 500], ['E4', 1000],
                ['C4', 300], ['C4', 200], ['D4', 500], ['C4', 500], ['G4', 500], ['F4', 1000]
            ]
        },
        fur_elise: {
            name: 'Fur Elise (Beethoven)',
            tempo: 80,
            notes: [
                ['E5', 300], ['D#5', 300], ['E5', 300], ['D#5', 300], ['E5', 300], ['B4', 300], ['D5', 300], ['C5', 300],
                ['A4', 900], ['C4', 300], ['E4', 300], ['A4', 300], ['B4', 900], ['E4', 300], ['G#4', 300], ['B4', 300],
                ['C5', 900], ['E4', 300], ['E5', 300], ['D#5', 300], ['E5', 300], ['D#5', 300], ['E5', 300], ['B4', 300], ['D5', 300], ['C5', 300],
                ['A4', 900], ['C4', 300], ['E4', 300], ['A4', 300], ['B4', 900], ['E4', 300], ['C5', 300], ['B4', 300], ['A4', 900]
            ]
        },
        let_it_be: {
            name: 'Let It Be (Beatles)',
            tempo: 70,
            notes: [
                ['C4', 400], ['G4', 400], ['A4', 400], ['C5', 800], ['G4', 400], ['F4', 800],
                ['E4', 400], ['D4', 400], ['C4', 800], ['G4', 400], ['A4', 400], ['G4', 800]
            ]
        },
        bohemian_rhapsody: {
            name: 'Bohemian Rhapsody (Queen)',
            tempo: 72,
            notes: [
                ['F4', 300], ['Bb4', 300], ['Bb4', 300], ['Bb4', 300], ['Ab4', 600], ['Bb4', 300],
                ['C5', 300], ['F4', 300], ['F4', 300], ['F4', 300], ['Eb4', 600], ['F4', 300],
                ['Bb4', 300], ['Bb4', 300], ['Bb4', 300], ['Ab4', 600], ['Bb4', 300], ['C5', 900]
            ]
        },
        billie_jean: {
            name: 'Billie Jean (M. Jackson)',
            tempo: 117,
            notes: [
                ['F#4', 250], ['F#4', 250], ['F#4', 250], ['F#4', 250], ['E4', 500], ['F#4', 500],
                ['B4', 500], ['A4', 500], ['G4', 500], ['F#4', 500], ['E4', 500], ['D4', 500],
                ['F#4', 250], ['F#4', 250], ['F#4', 250], ['F#4', 250], ['E4', 500], ['F#4', 500]
            ]
        },
        despacito: {
            name: 'Despacito (Luis Fonsi)',
            tempo: 89,
            notes: [
                ['B4', 300], ['C#5', 300], ['D5', 300], ['E5', 600], ['F#5', 300],
                ['B4', 300], ['C#5', 300], ['D5', 300], ['E5', 600], ['F#5', 300],
                ['F#5', 300], ['F#5', 300], ['F#5', 300], ['F#5', 300], ['E5', 600]
            ]
        },
        blinding_lights: {
            name: 'Blinding Lights (The Weeknd)',
            tempo: 171,
            notes: [
                ['F#4', 200], ['F#4', 200], ['F#4', 200], ['F#4', 200], ['A4', 400], ['F#4', 400],
                ['D4', 400], ['F#4', 200], ['F#4', 200], ['F#4', 200], ['F#4', 200], ['A4', 400], ['F#4', 400]
            ]
        },
        sweet_child: {
            name: "Sweet Child O' Mine (Guns N' Roses)",
            tempo: 126,
            notes: [
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['E5', 400]
            ]
        },
        stairway_heaven: {
            name: "Stairway to Heaven (Led Zeppelin)",
            tempo: 82,
            notes: [
                ['A4', 400], ['C5', 400], ['E5', 400], ['A5', 400],
                ['B5', 400], ['E5', 400], ['C5', 400], ['B4', 400],
                ['A4', 400], ['C5', 400], ['E5', 400], ['C5', 400],
                ['C6', 400], ['B5', 400], ['A5', 400], ['E5', 400],
                ['F#5', 400], ['E5', 400], ['C5', 400], ['A4', 400],
                ['A4', 400], ['C5', 400], ['E5', 400], ['C5', 400],
                ['F#5', 400], ['E5', 400], ['C5', 400], ['A4', 800]
            ]
        },
        smoke_water: {
            name: "Smoke on the Water (Deep Purple)",
            tempo: 112,
            notes: [
                ['G4', 400], ['Bb4', 400], ['C5', 400], ['G4', 400], ['Bb4', 400], ['C#5', 400], ['C5', 800],
                ['G4', 400], ['Bb4', 400], ['C5', 400], ['G4', 400], ['Bb4', 400], ['C#5', 400], ['C5', 800],
                ['G4', 400], ['Bb4', 400], ['C5', 400], ['G4', 400], ['Bb4', 400], ['C#5', 400], ['C5', 400], ['A#4', 400],
                ['G4', 400], ['Bb4', 400], ['C5', 400], ['G4', 400], ['Bb4', 400], ['C#5', 400], ['C5', 400], ['A#4', 400],
                ['G4', 400], ['A#4', 400], ['C5', 400], ['A#4', 400], ['G4', 800]
            ]
        },
        bohemian_rhapsody_rock: {
            name: "Bohemian Rhapsody Rock (Queen)",
            tempo: 72,
            notes: [
                ['F4', 400], ['A#4', 400], ['D5', 400], ['D#5', 400], ['F5', 400], ['D5', 400],
                ['A#4', 400], ['G#4', 400], ['G4', 400], ['F4', 800],
                ['F4', 400], ['A#4', 400], ['D5', 400], ['D#5', 400], ['F5', 400], ['D5', 400],
                ['A#4', 400], ['G#4', 400], ['G4', 400], ['F4', 800],
                ['F5', 400], ['E5', 400], ['F5', 400], ['E5', 400], ['F5', 400], ['C5', 800],
                ['F5', 400], ['E5', 400], ['F5', 400], ['E5', 400], ['F5', 400], ['C5', 800]
            ]
        },
        hotel_california: {
            name: "Hotel California (Eagles)",
            tempo: 75,
            notes: [
                ['B4', 400], ['D5', 400], ['F#5', 400], ['B4', 400], ['D5', 400], ['F#5', 400],
                ['A5', 400], ['G5', 400], ['F#5', 400], ['E5', 400], ['D5', 800],
                ['B4', 400], ['C#5', 400], ['D5', 400], ['E5', 400], ['F#5', 800],
                ['F#5', 400], ['E5', 400], ['D5', 400], ['C#5', 400], ['B4', 800],
                ['G5', 400], ['F#5', 400], ['E5', 400], ['D5', 400], ['C#5', 800],
                ['A4', 400], ['B4', 400], ['C#5', 400], ['D5', 400], ['E5', 400], ['F#5', 800]
            ]
        },
        back_in_black: {
            name: "Back in Black (AC/DC)",
            tempo: 96,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400]
            ]
        },
        enter_sandman: {
            name: "Enter Sandman (Metallica)",
            tempo: 123,
            notes: [
                ['E4', 200], ['F4', 200], ['G4', 200], ['F4', 200], ['E4', 200], ['F4', 200], ['G4', 200], ['F4', 200],
                ['E4', 200], ['F4', 200], ['G4', 200], ['F4', 200], ['E4', 200], ['F4', 200], ['G4', 200], ['F4', 200]
            ]
        },
        seven_nation: {
            name: "Seven Nation Army (The White Stripes)",
            tempo: 124,
            notes: [
                // Riff principal
                ['E4', 400], ['E4', 400], ['G4', 400], ['E4', 400], ['D4', 400], ['C4', 400], ['B3', 800],
                ['E4', 400], ['E4', 400], ['G4', 400], ['E4', 400], ['D4', 400], ['C4', 400], ['B3', 800],
                // Variation
                ['E4', 400], ['E4', 400], ['G4', 400], ['E4', 400], ['G4', 400], ['A4', 400], ['G4', 800],
                ['E4', 400], ['E4', 400], ['G4', 400], ['E4', 400], ['D4', 400], ['C4', 400], ['B3', 800],
                // Couplet
                ['E4', 400], ['G4', 400], ['A4', 400], ['G4', 400], ['E4', 400], ['D4', 400], ['C4', 800],
                ['E4', 400], ['G4', 400], ['A4', 400], ['G4', 400], ['E4', 400], ['D4', 400], ['C4', 800]
            ]
        },
        purple_haze: {
            name: "Purple Haze (Jimi Hendrix)",
            tempo: 112,
            notes: [
                ['E4', 200], ['G4', 200], ['E4', 200], ['Bb4', 400], ['A4', 400],
                ['E4', 200], ['G4', 200], ['E4', 200], ['Bb4', 400], ['A4', 400]
            ]
        },
        smells_teen_spirit: {
            name: "Smells Like Teen Spirit (Nirvana)",
            tempo: 117,
            notes: [
                // Riff principal
                ['F4', 200], ['Bb4', 200], ['Ab4', 200], ['Db5', 400],
                ['F4', 200], ['Bb4', 200], ['Ab4', 200], ['Db5', 400],
                ['F4', 200], ['Bb4', 200], ['Ab4', 200], ['Db5', 200], ['C5', 200], ['Bb4', 400],
                // Couplet
                ['F4', 200], ['Bb4', 200], ['Ab4', 200], ['Gb4', 400], ['F4', 400],
                ['F4', 200], ['Bb4', 200], ['Ab4', 200], ['Gb4', 400], ['F4', 400],
                // Refrain
                ['Bb4', 200], ['C5', 200], ['Db5', 400], ['C5', 200], ['Bb4', 200], ['Ab4', 400],
                ['Bb4', 200], ['C5', 200], ['Db5', 400], ['C5', 200], ['Bb4', 200], ['Ab4', 400],
                ['Bb4', 200], ['C5', 200], ['Db5', 200], ['C5', 200], ['Bb4', 200], ['Ab4', 200], ['F4', 600]
            ]
        },
        play_that_funky_music: {
            name: "Play That Funky Music (Wild Cherry)",
            tempo: 114,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400]
            ]
        },
        good_times: {
            name: "Good Times (Chic)",
            tempo: 110,
            notes: [
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 400]
            ]
        },
        car_wash: {
            name: "Car Wash (Rose Royce)",
            tempo: 124,
            notes: [
                ['C4', 200], ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['C4', 200], ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['C4', 200], ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400],
                ['C4', 200], ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400]
            ]
        },
        september: {
            name: "September (Earth, Wind & Fire)",
            tempo: 126,
            notes: [
                ['D5', 200], ['A4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['A4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['A4', 200], ['G4', 200], ['A4', 200],
                ['E5', 400], ['D5', 400], ['B4', 400], ['A4', 400]
            ]
        },
        brick_house: {
            name: "Brick House (Commodores)",
            tempo: 105,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400], ['A4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        jungle_boogie: {
            name: "Jungle Boogie (Kool & The Gang)",
            tempo: 102,
            notes: [
                ['E4', 200], ['G4', 200], ['Bb4', 200], ['C5', 400], ['Bb4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['Bb4', 200], ['C5', 400], ['Bb4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        lose_yourself: {
            name: "Lose Yourself (Eminem)",
            tempo: 171,
            notes: [
                // Intro piano
                ['E4', 200], ['B4', 200], ['E4', 200], ['B4', 200], ['E4', 200], ['B4', 200], ['E4', 200], ['B4', 200],
                ['A4', 200], ['E4', 200], ['A4', 200], ['E4', 200], ['A4', 200], ['E4', 200], ['A4', 200], ['E4', 200],
                // Couplet
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                // Refrain
                ['B4', 200], ['C#5', 200], ['D5', 400], ['C#5', 200], ['B4', 200], ['A4', 400],
                ['B4', 200], ['C#5', 200], ['D5', 400], ['C#5', 200], ['B4', 200], ['A4', 400],
                ['G4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 600]
            ]
        },
        still_dre: {
            name: "Still D.R.E. (Dr. Dre ft. Snoop Dogg)",
            tempo: 93,
            notes: [
                // Riff de piano principal
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['F#5', 400],
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['F#5', 400],
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['F#5', 400],
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['F#5', 400],
                // Variation
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['D#5', 400],
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['D#5', 400],
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['F#5', 400],
                ['C#5', 200], ['D#5', 200], ['G#5', 400], ['F#5', 200], ['F5', 200], ['F#5', 400]
            ]
        },
        gin_and_juice: {
            name: "Gin and Juice (Snoop Dogg)",
            tempo: 94,
            notes: [
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 400]
            ]
        },
        juicy: {
            name: "Juicy (The Notorious B.I.G.)",
            tempo: 96,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 200], ['B4', 200], ['A4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 200], ['B4', 200], ['A4', 400],
                ['E5', 200], ['D5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E5', 200], ['D5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        gold_digger: {
            name: "Gold Digger (Kanye West)",
            tempo: 93,
            notes: [
                // Intro/Sample
                ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['G4', 400],
                ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['G4', 400],
                // Couplet
                ['C5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['G4', 400],
                ['C5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['G4', 400],
                // Refrain
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['G4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['G4', 400]
            ]
        },
        in_da_club: {
            name: "In Da Club (50 Cent)",
            tempo: 90,
            notes: [
                // Intro/Riff
                ['D4', 200], ['F4', 200], ['G4', 200], ['Bb4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['Bb4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                // Couplet
                ['D4', 200], ['F4', 200], ['G4', 200], ['Bb4', 200], ['C5', 200], ['Bb4', 200], ['G4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['Bb4', 200], ['C5', 200], ['Bb4', 200], ['G4', 400],
                // Refrain
                ['F4', 200], ['G4', 200], ['Bb4', 200], ['C5', 400], ['Bb4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['Bb4', 200], ['C5', 400], ['Bb4', 200], ['G4', 200], ['F4', 400]
            ]
        },
        money_trees: {
            name: "Money Trees (Kendrick Lamar)",
            tempo: 140,
            notes: [
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 400]
            ]
        },
        thrift_shop: {
            name: "Thrift Shop (Macklemore)",
            tempo: 95,
            notes: [
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 400], ['A#4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 400], ['A#4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A#4', 400],
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A#4', 400],
                ['F5', 200], ['D5', 200], ['C5', 200], ['A#4', 200], ['G4', 200], ['F4', 400],
                ['F5', 200], ['D5', 200], ['C5', 200], ['A#4', 200], ['G4', 200], ['F4', 400]
            ]
        },
        empire_state: {
            name: "Empire State of Mind (Jay-Z)",
            tempo: 93,
            notes: [
                ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 400], ['A4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 400], ['A4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 400]
            ]
        },
        cant_touch_this: {
            name: "U Can't Touch This (MC Hammer)",
            tempo: 133,
            notes: [
                ['C4', 200], ['D4', 200], ['F4', 200], ['G4', 400], ['F4', 200], ['D4', 200], ['C4', 400],
                ['C4', 200], ['D4', 200], ['F4', 200], ['G4', 400], ['F4', 200], ['D4', 200], ['C4', 400],
                ['C4', 200], ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['G4', 200], ['F4', 400],
                ['C4', 200], ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['G4', 200], ['F4', 400],
                ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 200], ['C4', 400],
                ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 200], ['C4', 400]
            ]
        },
        california_love: {
            name: "California Love (2Pac)",
            tempo: 93,
            notes: [
                ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400], ['C5', 200], ['A4', 200], ['G4', 400],
                ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400], ['C5', 200], ['A4', 200], ['G4', 400],
                ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['E5', 200], ['D5', 200], ['C5', 400],
                ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['E5', 200], ['D5', 200], ['C5', 400],
                ['F5', 200], ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['F5', 200], ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400]
            ]
        },
        formation: {
            name: "Formation (Beyoncé)",
            tempo: 123,
            notes: [
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 400], ['A#4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 400], ['A#4', 200], ['G4', 200], ['F4', 400],
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A#4', 400],
                ['F4', 200], ['G4', 200], ['A#4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A#4', 400],
                ['F5', 200], ['D5', 200], ['C5', 200], ['A#4', 200], ['G4', 200], ['F4', 400],
                ['F5', 200], ['D5', 200], ['C5', 200], ['A#4', 200], ['G4', 200], ['F4', 400]
            ]
        },
        goosebumps: {
            name: "goosebumps (Travis Scott)",
            tempo: 130,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 200], ['B4', 200], ['A4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 200], ['B4', 200], ['A4', 400],
                ['E5', 200], ['D5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E5', 200], ['D5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        hotline_bling: {
            name: "Hotline Bling (Drake)",
            tempo: 135,
            notes: [
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 400], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['D4', 200], ['F4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 400],
                ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['F4', 200], ['D4', 400]
            ]
        },
        sicko_mode: {
            name: "Sicko Mode (Travis Scott)",
            tempo: 155,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['C5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 200], ['G4', 200], ['A4', 400],
                ['C5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 200], ['G4', 200], ['A4', 400],
                ['D5', 200], ['C5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['D5', 200], ['C5', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        gods_plan: {
            name: "God's Plan (Drake)",
            tempo: 77,
            notes: [
                ['F#4', 200], ['A4', 200], ['B4', 400], ['F#4', 200], ['A4', 200], ['B4', 400],
                ['F#4', 200], ['A4', 200], ['B4', 200], ['C#5', 200], ['B4', 200], ['A4', 400],
                ['F#4', 200], ['A4', 200], ['B4', 200], ['C#5', 200], ['D5', 200], ['C#5', 200], ['B4', 400],
                ['F#4', 200], ['A4', 200], ['B4', 200], ['C#5', 200], ['D5', 200], ['C#5', 200], ['B4', 400],
                ['F#5', 200], ['E5', 200], ['D5', 200], ['C#5', 200], ['B4', 200], ['A4', 400],
                ['F#5', 200], ['E5', 200], ['D5', 200], ['C#5', 200], ['B4', 200], ['A4', 400]
            ]
        },
        humble: {
            name: "HUMBLE. (Kendrick Lamar)",
            tempo: 150,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 400], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        get_lucky: {
            name: "Get Lucky (Daft Punk & Pharrell)",
            tempo: 116,
            notes: [
                ['B3', 200], ['D4', 200], ['F#4', 200], ['A4', 400], ['F#4', 200], ['D4', 200], ['B3', 400],
                ['B3', 200], ['D4', 200], ['F#4', 200], ['A4', 400], ['F#4', 200], ['D4', 200], ['B3', 400],
                ['B3', 200], ['D4', 200], ['F#4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['F#4', 400],
                ['B3', 200], ['D4', 200], ['F#4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['F#4', 400],
                ['D5', 200], ['B4', 200], ['A4', 200], ['F#4', 200], ['D4', 200], ['B3', 400],
                ['D5', 200], ['B4', 200], ['A4', 200], ['F#4', 200], ['D4', 200], ['B3', 400]
            ]
        },
        stronger: {
            name: "Stronger (Kanye West)",
            tempo: 104,
            notes: [
                ['E4', 200], ['F#4', 200], ['G#4', 200], ['B4', 400], ['G#4', 200], ['F#4', 200], ['E4', 400],
                ['E4', 200], ['F#4', 200], ['G#4', 200], ['B4', 400], ['G#4', 200], ['F#4', 200], ['E4', 400],
                ['E4', 200], ['F#4', 200], ['G#4', 200], ['B4', 200], ['C#5', 200], ['B4', 200], ['G#4', 400],
                ['E4', 200], ['F#4', 200], ['G#4', 200], ['B4', 200], ['C#5', 200], ['B4', 200], ['G#4', 400],
                ['E5', 200], ['C#5', 200], ['B4', 200], ['G#4', 200], ['F#4', 200], ['E4', 400],
                ['E5', 200], ['C#5', 200], ['B4', 200], ['G#4', 200], ['F#4', 200], ['E4', 400]
            ]
        },
        old_town_road: {
            name: "Old Town Road (Lil Nas X)",
            tempo: 136,
            notes: [
                // Refrain
                ['E4', 200], ['G4', 200], ['A4', 400], ['E4', 200], ['G4', 200], ['A4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                // Couplet
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['A4', 200], ['G4', 200], ['E4', 400],
                // Refrain
                ['E4', 200], ['G4', 200], ['A4', 400], ['E4', 200], ['G4', 200], ['A4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['G4', 200], ['E4', 400]
            ]
        },
        no_woman_no_cry: {
            name: "No Woman, No Cry (Bob Marley)",
            tempo: 76,
            notes: [
                ['C4', 400], ['G4', 400], ['A4', 400], ['F4', 400],
                ['C4', 400], ['G4', 400], ['F4', 800],
                ['C4', 400], ['G4', 400], ['A4', 400], ['F4', 400],
                ['C4', 400], ['G4', 400], ['F4', 800]
            ]
        },
        three_little_birds: {
            name: "Three Little Birds (Bob Marley)",
            tempo: 86,
            notes: [
                ['A4', 400], ['C#5', 400], ['E5', 400], ['C#5', 400],
                ['A4', 400], ['C#5', 400], ['E5', 400], ['C#5', 400],
                ['A4', 400], ['C#5', 400], ['E5', 400], ['C#5', 400],
                ['F#5', 400], ['E5', 400], ['C#5', 400], ['A4', 400],
                ['F#5', 200], ['F#5', 200], ['F#5', 200], ['F#5', 200],
                ['E5', 200], ['C#5', 200], ['A4', 200], ['G4', 200],
                ['D5', 200], ['D5', 200], ['D5', 200], ['D5', 200],
                ['C#5', 200], ['B4', 200], ['A4', 200], ['G4', 200]
            ]
        },
        could_you_be_loved: {
            name: "Could You Be Loved (Bob Marley)",
            tempo: 106,
            notes: [
                ['A4', 200], ['C5', 200], ['D5', 400], ['A4', 200], ['C5', 200], ['D5', 400],
                ['A4', 200], ['C5', 200], ['D5', 200], ['E5', 200], ['D5', 200], ['C5', 400],
                ['A4', 200], ['C5', 200], ['D5', 400], ['A4', 200], ['C5', 200], ['D5', 400],
                ['A4', 200], ['C5', 200], ['D5', 200], ['E5', 200], ['D5', 200], ['C5', 400],
                ['F5', 200], ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['F5', 200], ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 400]
            ]
        },
        i_shot_the_sheriff: {
            name: "I Shot the Sheriff (Bob Marley)",
            tempo: 92,
            notes: [
                ['G4', 200], ['A4', 200], ['C5', 400], ['G4', 200], ['A4', 200], ['C5', 400],
                ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['G4', 200], ['A4', 200], ['C5', 400], ['G4', 200], ['A4', 200], ['C5', 400],
                ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 200], ['C5', 200], ['A4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400]
            ]
        },
        redemption_song: {
            name: "Redemption Song (Bob Marley)",
            tempo: 80,
            notes: [
                ['G4', 400], ['A4', 400], ['C5', 400], ['G4', 400],
                ['E4', 400], ['G4', 400], ['A4', 800],
                ['G4', 400], ['A4', 400], ['C5', 400], ['G4', 400],
                ['E4', 400], ['G4', 400], ['A4', 800],
                ['C5', 400], ['D5', 400], ['E5', 400], ['D5', 400],
                ['C5', 400], ['A4', 400], ['G4', 800],
                ['C5', 400], ['D5', 400], ['E5', 400], ['D5', 400],
                ['C5', 400], ['A4', 400], ['G4', 800]
            ]
        },
        is_this_love: {
            name: "Is This Love (Bob Marley)",
            tempo: 82,
            notes: [
                ['D4', 400], ['F#4', 400], ['A4', 400], ['F#4', 400],
                ['D4', 400], ['F#4', 400], ['A4', 400], ['F#4', 400],
                ['D4', 400], ['F#4', 400], ['A4', 400], ['F#4', 400],
                ['B4', 400], ['A4', 400], ['F#4', 400], ['D4', 400],
                ['B4', 200], ['B4', 200], ['B4', 200], ['B4', 200],
                ['A4', 200], ['F#4', 200], ['D4', 200], ['C#4', 200],
                ['G4', 200], ['G4', 200], ['G4', 200], ['G4', 200],
                ['F#4', 200], ['E4', 200], ['D4', 200], ['C#4', 200]
            ]
        },
        jamming: {
            name: "Jamming (Bob Marley)",
            tempo: 90,
            notes: [
                ['G4', 400], ['B4', 400], ['D5', 400], ['B4', 400],
                ['G4', 400], ['B4', 400], ['D5', 400], ['B4', 400],
                ['G4', 400], ['B4', 400], ['D5', 400], ['B4', 400],
                ['E5', 400], ['D5', 400], ['B4', 400], ['G4', 400],
                ['E5', 200], ['E5', 200], ['E5', 200], ['E5', 200],
                ['D5', 200], ['B4', 200], ['G4', 200], ['F#4', 200],
                ['C5', 200], ['C5', 200], ['C5', 200], ['C5', 200],
                ['B4', 200], ['A4', 200], ['G4', 200], ['F#4', 200]
            ]
        },
        stir_it_up: {
            name: "Stir It Up (Bob Marley)",
            tempo: 84,
            notes: [
                ['A4', 400], ['C#5', 400], ['E5', 400], ['C#5', 400],
                ['A4', 400], ['C#5', 400], ['E5', 400], ['C#5', 400],
                ['A4', 400], ['C#5', 400], ['E5', 400], ['C#5', 400],
                ['F#5', 400], ['E5', 400], ['C#5', 400], ['A4', 400],
                ['F#5', 200], ['F#5', 200], ['F#5', 200], ['F#5', 200],
                ['E5', 200], ['C#5', 200], ['A4', 200], ['G#4', 200],
                ['D5', 200], ['D5', 200], ['D5', 200], ['D5', 200],
                ['C#5', 200], ['B4', 200], ['A4', 200], ['G#4', 200]
            ]
        },
        buffalo_soldier: {
            name: "Buffalo Soldier (Bob Marley)",
            tempo: 94,
            notes: [
                ['D4', 400], ['F#4', 400], ['A4', 400], ['F#4', 400],
                ['D4', 400], ['F#4', 400], ['A4', 400], ['F#4', 400],
                ['D4', 400], ['F#4', 400], ['A4', 400], ['F#4', 400],
                ['B4', 400], ['A4', 400], ['F#4', 400], ['D4', 400],
                ['B4', 200], ['B4', 200], ['B4', 200], ['B4', 200],
                ['A4', 200], ['F#4', 200], ['D4', 200], ['C#4', 200],
                ['G4', 200], ['G4', 200], ['G4', 200], ['G4', 200],
                ['F#4', 200], ['E4', 200], ['D4', 200], ['C#4', 200]
            ]
        },
        superstition: {
            name: "Superstition (Stevie Wonder)",
            tempo: 101,
            notes: [
                ['Eb4', 200], ['Eb4', 200], ['Eb4', 200], ['Eb4', 200],
                ['Eb4', 200], ['Eb4', 200], ['Eb4', 200], ['Eb4', 200],
                ['Eb4', 200], ['Eb4', 200], ['Eb4', 200], ['Eb4', 200],
                ['Eb4', 200], ['Eb4', 200], ['Bb4', 400], ['Ab4', 400]
            ]
        },
        get_up: {
            name: "Get Up (James Brown)",
            tempo: 110,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 400],
                ['E5', 200], ['D5', 200], ['B4', 200], ['A4', 200], ['G4', 400],
                ['E5', 200], ['D5', 200], ['B4', 200], ['A4', 200], ['G4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['B4', 200], ['D5', 400]
            ]
        },
        jungle_boogie: {
            name: "Jungle Boogie (Kool & The Gang)",
            tempo: 107,
            notes: [
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['E5', 200], ['D5', 200], ['C5', 200], ['A4', 200], ['G4', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400],
                ['E4', 200], ['G4', 200], ['A4', 200], ['C5', 200], ['D5', 400]
            ]
        },
        sweet_child: {
            name: "Sweet Child O' Mine (Guns N' Roses)",
            tempo: 126,
            notes: [
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['A4', 200],
                ['D5', 200], ['D5', 200], ['A4', 200], ['G4', 200], ['G4', 200], ['E5', 200],
                ['D5', 400], ['A4', 400], ['G4', 400], ['D4', 400],
                ['C5', 400], ['D5', 400], ['A4', 400], ['G4', 400],
                ['E5', 400], ['D5', 400], ['C5', 400], ['A4', 400]
            ]
        },
        stairway_heaven: {
            name: "Stairway to Heaven (Led Zeppelin)",
            tempo: 82,
            notes: [
                ['A4', 400], ['C5', 400], ['E5', 400], ['A5', 400],
                ['B5', 400], ['E5', 400], ['C5', 400], ['B4', 400],
                ['A4', 400], ['C5', 400], ['E5', 400], ['C5', 400],
                ['C6', 400], ['B5', 400], ['A5', 400], ['E5', 400],
                ['F#5', 400], ['E5', 400], ['C5', 400], ['A4', 400],
                ['A4', 400], ['C5', 400], ['E5', 400], ['C5', 400],
                ['F#5', 400], ['E5', 400], ['C5', 400], ['A4', 800]
            ]
        },
        smoke_water: {
            name: "Smoke on the Water (Deep Purple)",
            tempo: 112,
            notes: [
                ['G4', 400], ['A#4', 400], ['C5', 400], ['G4', 400], ['A#4', 400], ['C#5', 400], ['C5', 800],
                ['G4', 400], ['A#4', 400], ['C5', 400], ['G4', 400], ['A#4', 400], ['C#5', 400], ['C5', 800],
                ['G4', 400], ['A#4', 400], ['C5', 400], ['G4', 400], ['A#4', 400], ['C#5', 400], ['C5', 400], ['A#4', 400],
                ['G4', 400], ['A#4', 400], ['C5', 400], ['G4', 400], ['A#4', 400], ['C#5', 400], ['C5', 400], ['A#4', 400],
                ['G4', 400], ['A#4', 400], ['C5', 400], ['A#4', 400], ['G4', 800]
            ]
        },
        bohemian_rhapsody_rock: {
            name: "Bohemian Rhapsody (Queen)",
            tempo: 72,
            notes: [
                ['F4', 400], ['A#4', 400], ['D5', 400], ['D#5', 400], ['F5', 400], ['D5', 400],
                ['A#4', 400], ['G#4', 400], ['G4', 400], ['F4', 800],
                ['F4', 400], ['A#4', 400], ['D5', 400], ['D#5', 400], ['F5', 400], ['D5', 400],
                ['A#4', 400], ['G#4', 400], ['G4', 400], ['F4', 800],
                ['F5', 400], ['E5', 400], ['F5', 400], ['E5', 400], ['F5', 400], ['C5', 800],
                ['F5', 400], ['E5', 400], ['F5', 400], ['E5', 400], ['F5', 400], ['C5', 800]
            ]
        },
    };
    
    // Charger une mélodie
    function loadMelody(melodyName, select = true) {
        console.log(`Chargement de la mélodie: ${melodyName}`);
        
        // Vérifier que la mélodie existe
        if (!melodies[melodyName]) {
            console.error(`Mélodie ${melodyName} non trouvée`);
            alert(`Mélodie ${melodyName} non disponible`);
            return;
        }
        
        // Arrêter complètement l'animation en cours si elle existe
        if (isPlaying) {
            stopMelody();
        }
        
        // Réinitialiser complètement les variables
        lastTime = 0;
        score = 0;
        activeNotes = [];
        
        // Effacer le canvas
        drawBackground();
        
        // Mettre à jour la mélodie actuelle avec une copie profonde
        currentMelodyName = melodyName;
        melody = JSON.parse(JSON.stringify(melodies[melodyName]));
        console.log('Mélodie chargée:', melody);
        console.log('Nombre de notes dans la mélodie:', melody.notes.length);
        console.log('Premières notes:', melody.notes.slice(0, 5));
        
        // Mettre à jour le sélecteur de mélodie
        const melodySelect = document.getElementById('melody-select');
        if (melodySelect && select) {
            melodySelect.value = melodyName;
        }
        
        // Initialiser les notes
        initializeNotes();
        
        // Mettre à jour l'affichage du BPM
        updateBPMDisplay();
        
        // Redessiner le fond et les notes
        drawBackground();
        
        console.log(`Mélodie ${melodyName} chargée avec ${melody.notes.length} notes et tempo ${melody.tempo}`);
    }
    
    // Initialiser les notes pour la mélodie actuelle
    function initializeNotes() {
        // Vider complètement le tableau des notes actives
        activeNotes = [];
        
        console.log('Initialisation des notes avec la mélodie:', melody);
        console.log('Nom de la mélodie actuelle:', currentMelodyName);
        
        if (!melody) {
            console.error('No melody to initialize');
            return;
        }
        
        // Vérifier que la mélodie a des notes
        if (!melody.notes || melody.notes.length === 0) {
            console.error('La mélodie ne contient pas de notes');
            return;
        }
        
        console.log(`Initializing ${melody.notes.length} notes for the melody with tempo ${melody.tempo}`);
        
        // Facteur d'espacement vertical basé sur le tempo de la mélodie
        const tempoFactor = melody.tempo ? (120 / melody.tempo) : 1;
        console.log(`Tempo: ${melody.tempo}, Facteur d'espacement: ${tempoFactor}`);
        
        let cumulativeDelay = 0;
        melody.notes.forEach(([noteId, delay], index) => {
            console.log(`Initialisation de la note ${index}: ${noteId} avec délai ${delay}`);
            
            // Obtenir la position horizontale basée sur la touche
            const key = pianoKeys[noteId];
            if (!key) {
                console.warn(`Key not found for note: ${noteId}`);
                return;
            }
            
            const keyRect = key.getBoundingClientRect();
            const keyboardRect = keyboard.getBoundingClientRect();
            const x = (keyRect.left - keyboardRect.left) / keyboardRect.width * canvas.width;
            const width = keyRect.width / keyboardRect.width * canvas.width;
            
            // Calculer la couleur basée sur la note de base
            const baseNote = noteId.charAt(0);
            const color = config.noteColors[baseNote] || '#fff';
            
            // Ajuster l'espacement vertical en fonction du tempo et de la durée de la note
            const verticalSpacing = delay * 0.2 * tempoFactor;
            
            // Créer la note
            activeNotes.push({
                noteId,
                x,
                y: -config.noteHeight - cumulativeDelay * 0.2 * tempoFactor, // Position initiale ajustée au tempo
                width,
                height: config.noteHeight,
                color,
                played: false,
                missed: false,
                delay: delay, // Stocker la durée pour référence
                index: index // Stocker l'index pour débogage
            });
            
            cumulativeDelay += delay;
        });
        
        console.log(`${activeNotes.length} notes initialized with cumulative delay ${cumulativeDelay}`);
        console.log('Premières notes initialisées:', activeNotes.slice(0, 5));
    }
    
    // Mettre à jour les positions des notes et dessiner
    function updateNotes(timestamp) {
        if (!isPlaying) return;
        
        // Calculer le delta temps
        const deltaTime = timestamp - (lastTime || timestamp);
        lastTime = timestamp;
        
        // Vitesse ajustée en fonction du tempo de la mélodie
        const tempoFactor = melody && melody.tempo ? (melody.tempo / 120) : 1;
        const speed = config.noteSpeed * config.speedMultiplier * tempoFactor * (deltaTime / 16.7); // Normalisation pour 60 FPS
        
        // Effacer le canvas
        drawBackground();
        
        // Dessiner et mettre à jour chaque note
        activeNotes.forEach(note => {
            // Mettre à jour la position
            note.y += speed;
            
            // Vérifier si la note est active sur la ligne guide
            const guideLineY = canvas.height;
            if (!note.played && !note.missed && 
                note.y + note.height >= guideLineY - 30 && note.y <= guideLineY + 10) {
                highlightKey(note.noteId, 'key-active');
            }
            
            // Marquer comme manquée si elle passe la ligne guide
            if (!note.played && !note.missed && note.y > guideLineY + 20) {
                note.missed = true;
            }
            
            // Dessiner la note (seulement si visible)
            if (note.y + note.height > 0 && note.y < canvas.height) {
                drawNote(note);
            }
        });
        
        // Vérifier si toutes les notes sont passées
        const allNotesDone = activeNotes.every(note => note.played || note.missed || note.y > canvas.height + note.height + 50);
        const lastNotePassedScreen = activeNotes.length > 0 && activeNotes[activeNotes.length - 1].y > canvas.height + 100;
        
        if ((allNotesDone && activeNotes.length > 0) || lastNotePassedScreen) {
            console.log('All notes completed or last note passed screen');
            showResult();
            return;
        }
        
        // Continuer l'animation
        animationId = requestAnimationFrame(updateNotes);
    }
    
    // Dessiner une note sur le canvas
    function drawNote(note) {
        if (note.y < canvas.height) {
            // Rectangle principal avec dégradé
            const gradient = ctx.createLinearGradient(note.x, note.y, note.x, note.y + note.height);
            gradient.addColorStop(0, note.color);
            gradient.addColorStop(1, shadeColor(note.color, -20));
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.roundRect(note.x, note.y, note.width, note.height, 5);
            ctx.fill();
            
            // Bordure
            ctx.strokeStyle = shadeColor(note.color, 20);
            ctx.lineWidth = 2;
            ctx.stroke();
            
            // Reflet
            ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.beginPath();
            ctx.roundRect(note.x + 2, note.y + 2, note.width - 4, 10, [5, 5, 0, 0]);
            ctx.fill();
            
            // Indicateur si jouée ou manquée
            if (note.played) {
                ctx.fillStyle = 'rgba(0, 255, 0, 0.3)';
                ctx.beginPath();
                ctx.roundRect(note.x, note.y, note.width, note.height, 5);
                ctx.fill();
            } else if (note.missed) {
                ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';
                ctx.beginPath();
                ctx.roundRect(note.x, note.y, note.width, note.height, 5);
                ctx.fill();
            }
            
            // Ajouter le nom de la note au centre du rectangle
            ctx.fillStyle = '#000'; // Texte en noir
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(note.noteId, note.x + note.width / 2, note.y + note.height / 2);
        }
    }
    
    // Mettre en évidence une touche
    function highlightKey(noteId, className = 'key-active') {
        const key = pianoKeys[noteId];
        if (key) {
            // Utiliser la couleur de la note au lieu de la classe CSS
            const baseNote = noteId.charAt(0) + (noteId.charAt(1) === '#' ? '#' : '');
            const color = config.noteColors[baseNote] || '#fff';
            
            // Sauvegarder la couleur de fond originale
            const originalBackground = key.style.backgroundColor;
            
            // Appliquer la couleur de la note
            key.style.backgroundColor = color;
            key.style.boxShadow = `0 0 10px ${color}`;
            
            // Rétablir la couleur originale après un délai
            setTimeout(() => {
                key.style.backgroundColor = '';
                key.style.boxShadow = '';
            }, 300);
        }
    }
    
    // Jouer un son
    function playSound(noteId) {
        if (window.playSound) {
            window.playSound(noteId);
            return;
        }
        
        // Fallback si la fonction globale n'existe pas
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gain = audioContext.createGain();
            
            oscillator.type = 'sine';
            
            // Calculer la fréquence
            const note = noteId[0];
            const octave = parseInt(noteId.slice(-1));
            const isSharp = noteId.includes('#');
            
            // Mapping des notes
            const noteIndices = {
                'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5, 
                'F#': 6, 'G': 7, 'G#': 8, 'A': 9, 'A#': 10, 'B': 11
            };
            
            // Obtenir l'index de la note
            let noteIndex = noteIndices[note];
            if (isSharp) {
                noteIndex = noteIndices[noteId.substring(0, 2)];
            }
            
            // Calculer la fréquence (A4 = 440Hz)
            const semitoneFromA4 = (octave - 4) * 12 + noteIndex - 9;
            const frequency = 440 * Math.pow(2, semitoneFromA4 / 12);
            
            oscillator.frequency.value = frequency;
            oscillator.connect(gain);
            gain.connect(audioContext.destination);
            
            // Adoucir l'attaque et la relâche
            gain.gain.setValueAtTime(0, audioContext.currentTime);
            gain.gain.linearRampToValueAtTime(0.5, audioContext.currentTime + 0.02);
            gain.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.3);
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.3);
            
        } catch (e) {
            console.error('Audio playback error:', e);
        }
    }
    
    // Gérer l'appui sur une touche
    function handleKeyPress(noteId) {
        if (!isPlaying) return;
        
        console.log(`Key pressed: ${noteId}`);
        
        // Chercher une note active correspondant à cette touche
        const guideLineY = canvas.height;
        const activeNote = activeNotes.find(note => 
            note.noteId === noteId && 
            !note.played && 
            !note.missed && 
            note.y + note.height >= guideLineY - 30 && note.y <= guideLineY + 10
        );
        
        if (activeNote) {
            // Note correcte
            activeNote.played = true;
            score += 10;
            if (scoreDisplay) scoreDisplay.textContent = score;
            highlightKey(noteId, 'key-correct');
            
            // Jouer le son
            playSound(noteId);
        } else {
            // Note incorrecte
            highlightKey(noteId, 'key-wrong');
            playSound(noteId);
        }
    }
    
    // Assombrir ou éclaircir une couleur
    function shadeColor(color, percent) {
        let R = parseInt(color.substring(1, 3), 16);
        let G = parseInt(color.substring(3, 5), 16);
        let B = parseInt(color.substring(5, 7), 16);

        R = parseInt(R * (100 + percent) / 100);
        G = parseInt(G * (100 + percent) / 100);
        B = parseInt(B * (100 + percent) / 100);

        R = (R < 255) ? R : 255;  
        G = (G < 255) ? G : 255;  
        B = (B < 255) ? B : 255;  

        R = Math.max(0, R);
        G = Math.max(0, G);
        B = Math.max(0, B);

        const RR = ((R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16));
        const GG = ((G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16));
        const BB = ((B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16));

        return "#" + RR + GG + BB;
    }
    
    // Afficher le résultat final
    function showResult() {
        // Arrêter l'animation
        isPlaying = false;
        if (animationId) {
            cancelAnimationFrame(animationId);
            animationId = null;
        }
        
        // Réactiver les boutons
        if (startButton) startButton.disabled = false;
        if (stopButton) stopButton.disabled = true;
        
        // Calculer les statistiques
        const playedNotes = activeNotes.filter(note => note.played).length;
        const totalNotes = activeNotes.length;
        const accuracy = Math.round((playedNotes / totalNotes) * 100) || 0;
        
        // Créer le popup de résultat
        const result = document.createElement('div');
        result.className = 'result-popup';
        result.innerHTML = `
            <h2>Résultat</h2>
            <p>Score: ${score}</p>
            <p>Précision: ${accuracy}%</p>
            <p>Notes jouées: ${playedNotes}/${totalNotes}</p>
            <div>
                <button id="retry-button">Réessayer</button>
                <button id="close-button">Fermer</button>
            </div>
        `;
        
        // Rechercher le conteneur piano-roll et ajouter le résultat
        const pianoRoll = document.querySelector('.piano-roll');
        if (pianoRoll) {
            pianoRoll.appendChild(result);
            
            // Ajouter les événements
            const retryButton = document.getElementById('retry-button');
            if (retryButton) {
                retryButton.addEventListener('click', () => {
                    // Supprimer la popup
                    result.remove();
                    
                    // Réinitialiser complètement l'état du jeu
                    stopMelody();
                    
                    // Réinitialiser les variables
                    lastTime = 0;
                    score = 0;
                    activeNotes = [];
                    
                    // Effacer le canvas
                    drawBackground();
                    
                    // Recharger la mélodie actuelle
                    if (currentMelodyName) {
                        console.log('Rechargement de la mélodie:', currentMelodyName);
                        loadMelody(currentMelodyName, false); // Ne pas changer la sélection
                    }
                    
                    // Démarrer la mélodie après un court délai
                    setTimeout(() => {
                        startMelody();
                    }, 100);
                });
            }
            
            const closeButton = document.getElementById('close-button');
            if (closeButton) {
                closeButton.addEventListener('click', () => {
                    // Supprimer la popup
                    result.remove();
                    
                    // Réinitialiser complètement l'état du jeu
                    stopMelody();
                    
                    // Réinitialiser les variables
                    lastTime = 0;
                    score = 0;
                    activeNotes = [];
                    
                    // Effacer le canvas
                    drawBackground();
                    
                    // Mettre à jour l'affichage du score
                    if (scoreDisplay) {
                        scoreDisplay.textContent = '0';
                    }
                });
            }
        } else {
            console.error('Piano roll container not found');
        }
    }
    
    // Démarrer la mélodie
    function startMelody() {
        if (isPlaying) {
            console.log('Already playing, stopping first');
            stopMelody();
        }
        
        console.log('Starting melody');
        
        // Réinitialiser les variables
        isPlaying = true;
        lastTime = 0;
        score = 0;
        
        // S'assurer que les notes sont correctement initialisées
        if (activeNotes.length === 0 && melody) {
            initializeNotes();
        }
        
        // Désactiver le bouton démarrer et activer l'arrêt
        if (startButton) startButton.disabled = true;
        if (stopButton) stopButton.disabled = false;
        
        // Démarrer l'animation
        animationId = requestAnimationFrame(updateNotes);
    }
    
    // Arrêter la mélodie
    function stopMelody() {
        if (!isPlaying) return;
        
        console.log('Stopping melody');
        isPlaying = false;
        
        // Annuler l'animation
        if (animationId) {
            cancelAnimationFrame(animationId);
            animationId = null;
        }
        
        // Activer le bouton démarrer et désactiver l'arrêt
        if (startButton) startButton.disabled = false;
        if (stopButton) stopButton.disabled = true;
        
        // Réinitialiser les variables
        lastTime = 0;
        
        // Effacer les notes
        activeNotes = [];
        drawBackground();
        
        // Réinitialiser les classes des touches
        Object.values(pianoKeys).forEach(key => {
            key.classList.remove('key-active', 'key-correct', 'key-wrong');
        });
    }
    
    // Fonction pour fermer proprement la popup de contrôles
    function closeControlsPopup() {
        const controlsPopup = document.getElementById('controls-popup');
        if (!controlsPopup) return;
        
        // Retirer la classe visible
        controlsPopup.classList.remove('visible');
        
        // Modifier directement le style pour forcer la fermeture
        controlsPopup.style.display = 'none';
        
        // Réinitialiser le style après un court délai
        setTimeout(() => {
            // Rétablir le style par défaut sans ré-afficher la popup
            controlsPopup.style.removeProperty('display');
        }, 100);
    }
    
    // Gestion MIDI
    function onMIDISuccess(midiAccess) {
        console.log('MIDI Ready!');
        midiAccess.inputs.forEach(input => {
            input.onmidimessage = onMIDIMessage;
        });
    }
    
    function onMIDIFailure(error) {
        console.log('MIDI Failed:', error);
    }
    
    function onMIDIMessage(event) {
        const command = event.data[0];
        const note = event.data[1];
        const velocity = event.data[2];
        
        // Convertir note MIDI en format de note
        const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        const noteName = noteNames[note % 12];
        const octave = Math.floor(note / 12) - 1;
        const noteId = `${noteName}${octave}`;
        
        // Note On avec vélocité
        if (command === 144 && velocity > 0) {
            handleKeyPress(noteId);
        }
        // Note Off
        else if (command === 128 || (command === 144 && velocity === 0)) {
            if (pianoKeys[noteId]) {
                pianoKeys[noteId].classList.remove('key-active', 'key-correct', 'key-wrong');
            }
        }
    }
    
    // Initialiser l'application
    function init() {
        // Ajuster la taille du canvas
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        
        // Créer le clavier
        createKeyboard();
        
        // Dessiner le fond
        drawBackground();
        
        // Écouter les événements (avec vérification de l'existence des éléments)
        if (startButton) startButton.addEventListener('click', startMelody);
        if (stopButton) stopButton.addEventListener('click', stopMelody);
        if (twinkleButton) twinkleButton.addEventListener('click', () => loadMelody('twinkle'));
        if (jingleButton) jingleButton.addEventListener('click', () => loadMelody('jingle'));
        if (happyButton) happyButton.addEventListener('click', () => loadMelody('happy'));
        
        // Gérer le sélecteur de mélodie
        const melodySelect = document.getElementById('melody-select');
        if (melodySelect) {
            // Vérifier que toutes les options correspondent à des mélodies existantes
            Array.from(melodySelect.options).forEach(option => {
                const value = option.value;
                if (value && !melodies[value]) {
                    console.warn(`Mélodie non définie dans le code: ${value}`);
                }
            });
            
            melodySelect.addEventListener('change', () => {
                const selectedMelody = melodySelect.value;
                console.log('Mélodie sélectionnée dans le menu:', selectedMelody);
                if (selectedMelody) {
                    // Réinitialiser complètement avant de charger la nouvelle mélodie
                    if (isPlaying) {
                        stopMelody();
                    }
                    activeNotes = [];
                    lastTime = 0;
                    score = 0;
                    loadMelody(selectedMelody);
                }
            });
        }
        
        // Gérer le contrôle de vitesse
        const speedControl = document.getElementById('speed-control');
        const speedValue = document.getElementById('speed-value');
        if (speedControl) {
            speedControl.value = config.speedMultiplier;
            if (speedValue) speedValue.textContent = config.speedMultiplier.toFixed(1) + 'x';
            
            speedControl.addEventListener('input', () => {
                const newSpeed = parseFloat(speedControl.value);
                config.speedMultiplier = newSpeed;
                if (speedValue) speedValue.textContent = newSpeed.toFixed(1) + 'x';
                updateBPMDisplay();
            });
        }
        
        // Gérer l'affichage des BPM
        updateBPMDisplay();
        
        // Charger une mélodie par défaut
        loadMelody('twinkle', true);
        
        // Initialiser MIDI si disponible
        if (navigator.requestMIDIAccess) {
            navigator.requestMIDIAccess()
                .then(onMIDISuccess)
                .catch(onMIDIFailure);
        }
        
        console.log('Application initialisée');
    }
    
    // Fonction pour ajuster la taille du canvas
    function resizeCanvas() {
        canvas.width = canvas.parentElement.clientWidth;
        canvas.height = canvas.parentElement.clientHeight;
        drawBackground();
    }
    
    // Dessiner le fond noir avec lignes de grille
    function drawBackground() {
        ctx.fillStyle = '#000';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Dessiner des lignes de grille
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 1;
        
        const measureHeight = 100;
        for (let y = 0; y < canvas.height; y += measureHeight) {
            ctx.beginPath();
            ctx.moveTo(0, y);
            ctx.lineTo(canvas.width, y);
            ctx.stroke();
        }
    }
    
    // Créer le clavier
    function createKeyboard() {
        // Vider le clavier
        keyboard.innerHTML = '';
        pianoKeys = {};
        
        // Notes et octaves
        const whiteNotes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];
        const blackNotes = ['C#', 'D#', 'F#', 'G#', 'A#'];
        const octaves = [3, 4, 5]; // 3 octaves
        
        // Position des touches noires (relatif à l'index des touches blanches)
        const blackKeyPositions = [
            {note: 'C#', afterWhite: 0}, // Après C
            {note: 'D#', afterWhite: 1}, // Après D
            {note: 'F#', afterWhite: 3}, // Après F
            {note: 'G#', afterWhite: 4}, // Après G
            {note: 'A#', afterWhite: 5}  // Après A
        ];
        
        // Créer les touches blanches
        const totalWhiteKeys = whiteNotes.length * octaves.length;
        const whiteKeyWidth = 100 / totalWhiteKeys;
        
        let whiteKeyIndex = 0;
        octaves.forEach(octave => {
            whiteNotes.forEach(note => {
                const noteId = `${note}${octave}`;
                const key = document.createElement('div');
                key.className = 'white-key';
                key.dataset.note = noteId;
                key.style.width = `${whiteKeyWidth}%`;
                key.style.left = `${whiteKeyIndex * whiteKeyWidth}%`;
                
                // Ajouter un attribut data-color pour stocker la couleur de la note
                key.dataset.color = config.noteColors[note] || '#fff';
                
                key.addEventListener('mousedown', () => handleKeyPress(noteId));
                keyboard.appendChild(key);
                pianoKeys[noteId] = key;
                whiteKeyIndex++;
            });
        });
        
        // Créer les touches noires
        const blackKeyWidth = whiteKeyWidth * 0.6; // Réduit de 0.65 à 0.6
        
        octaves.forEach((octave, octaveIndex) => {
            blackKeyPositions.forEach(pos => {
                const noteId = `${pos.note}${octave}`;
                const key = document.createElement('div');
                key.className = 'black-key';
                key.dataset.note = noteId;
                
                // Calcul de la position pour aligner les touches noires sur le bord droit des touches blanches
                const whiteKeyPosition = (octaveIndex * 7 + pos.afterWhite) * whiteKeyWidth;
                
                // Positionnement ajusté pour aligner les touches noires sur le bord droit des touches blanches
                key.style.width = `${blackKeyWidth}%`;
                key.style.left = `${whiteKeyPosition + whiteKeyWidth}%`;
                key.style.height = '60%'; // Réduit la hauteur des touches noires
                
                // Ajouter un attribut data-color pour stocker la couleur de la note
                key.dataset.color = config.noteColors[pos.note] || '#fff';
                
                key.addEventListener('mousedown', () => handleKeyPress(noteId));
                keyboard.appendChild(key);
                pianoKeys[noteId] = key;
            });
        });
    }
    
    // Mettre à jour l'affichage du BPM
    function updateBPMDisplay() {
        const bpmDisplay = document.getElementById('bpm-value');
        
        if (currentMelodyName && melodies[currentMelodyName]) {
            const originalBPM = melodies[currentMelodyName].tempo || 0;
            const adjustedBPM = Math.round(originalBPM * config.speedMultiplier);
            
            // Mettre à jour l'affichage du BPM
            if (bpmDisplay) {
                bpmDisplay.textContent = adjustedBPM;
            }
        }
    }
    
    // Initialiser l'application
    init();
});
