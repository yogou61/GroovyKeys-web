document.addEventListener('DOMContentLoaded', () => {
    // Configuration initiale
    const pianoDiv = document.getElementById('piano');
    const chordButtonsDiv = document.getElementById('chord-buttons');
    const scaleTypeSelect = document.getElementById('scale-type');
    const scaleRootSelect = document.getElementById('scale-root');
    const pianoSounds = {};

    // Définition des gammes et accords
    const scales = {
        major: {
            intervals: [0, 2, 4, 5, 7, 9, 11],
            chords: {
                'C': { type: 'major', intervals: [0, 4, 7], fingers: [1, 3, 5] },
                'D': { type: 'minor', intervals: [0, 3, 7], fingers: [1, 3, 5] },
                'E': { type: 'minor', intervals: [0, 3, 7], fingers: [1, 3, 5] },
                'F': { type: 'major', intervals: [0, 4, 7], fingers: [1, 3, 5] },
                'G': { type: 'major', intervals: [0, 4, 7], fingers: [1, 3, 5] },
                'A': { type: 'minor', intervals: [0, 3, 7], fingers: [1, 3, 5] },
                'B': { type: 'diminished', intervals: [0, 3, 6], fingers: [1, 2, 4] }
            }
        },
        minor: {
            intervals: [0, 2, 3, 5, 7, 8, 10],
            chords: {
                'C': { type: 'minor', intervals: [0, 3, 7], fingers: [1, 3, 5] },
                'D': { type: 'diminished', intervals: [0, 3, 6], fingers: [1, 2, 5] },
                'E': { type: 'major', intervals: [0, 4, 7], fingers: [1, 3, 5] },
                'F': { type: 'minor', intervals: [0, 3, 7], fingers: [1, 3, 5] },
                'G': { type: 'minor', intervals: [0, 3, 7], fingers: [1, 3, 5] },
                'A': { type: 'major', intervals: [0, 4, 7], fingers: [1, 3, 5] },
                'B': { type: 'major', intervals: [0, 4, 7], fingers: [1, 3, 5] }
            }
        },
        blues: {
            intervals: [0, 3, 5, 6, 7, 10],
            chords: {
                'C': { type: 'dominant7', intervals: [0, 4, 7, 10], fingers: [1, 2, 3, 5] },
                'D': { type: 'minor7', intervals: [0, 3, 7, 10], fingers: [1, 2, 3, 5] },
                'E': { type: 'minor7', intervals: [0, 3, 7, 10], fingers: [1, 2, 3, 5] },
                'F': { type: 'dominant7', intervals: [0, 4, 7, 10], fingers: [1, 2, 3, 5] },
                'G': { type: 'dominant7', intervals: [0, 4, 7, 10], fingers: [1, 2, 3, 5] },
                'A': { type: 'minor7', intervals: [0, 3, 7, 10], fingers: [1, 2, 3, 5] },
                'B': { type: 'diminished7', intervals: [0, 3, 6, 9], fingers: [1, 2, 3, 5] }
            }
        },
        lofi: {
            intervals: [0, 2, 3, 5, 7, 8, 10],
            chords: {
                'C': { type: 'major7', intervals: [0, 4, 7, 11], fingers: [1, 2, 3, 5] },
                'D': { type: 'minor7', intervals: [0, 3, 7, 10], fingers: [1, 2, 3, 5] },
                'E': { type: 'minor7', intervals: [0, 3, 7, 10], fingers: [1, 2, 3, 5] },
                'F': { type: 'major7', intervals: [0, 4, 7, 11], fingers: [1, 2, 3, 5] },
                'G': { type: 'dominant9', intervals: [0, 4, 7, 10, 14], fingers: [1, 2, 3, 4, 5] },
                'A': { type: 'minor9', intervals: [0, 3, 7, 10, 14], fingers: [1, 2, 3, 4, 5] },
                'B': { type: 'minor7b5', intervals: [0, 3, 6, 10], fingers: [1, 2, 3, 5] }
            }
        }
    };

    // Fonctions utilitaires pour les notes
    const noteNameToMidiNote = (noteName) => {
        const notesRef = {"C": 0, "C#": 1, "Db": 1, "D": 2, "D#": 3, "Eb": 3, "E": 4, "F": 5,
                         "F#": 6, "Gb": 6, "G": 7, "G#": 8, "Ab": 8, "A": 9, "A#": 10, "Bb": 10, "B": 11};
        const note = noteName.slice(0, -1);
        const octave = parseInt(noteName.slice(-1));
        return (octave + 1) * 12 + notesRef[note];
    };

    const midiNoteToNoteName = (midiNote) => {
        const notesRef = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
        const octave = Math.floor(midiNote / 12) - 1;
        const noteIndex = midiNote % 12;
        return notesRef[noteIndex] + octave;
    };

    // Gestion des accords et des gammes
    let currentChord = null;
    let activeChordNotes = new Set();

    const updateChordButtons = () => {
        const scaleType = scaleTypeSelect.value;
        const scaleRoot = scaleRootSelect.value;
        const scaleChords = scales[scaleType].chords;
        
        chordButtonsDiv.innerHTML = '';
        Object.entries(scaleChords).forEach(([chordName, chord]) => {
            const button = document.createElement('button');
            button.className = 'chord-button';
            button.textContent = `${chordName} ${chord.type}`;
            button.addEventListener('click', () => {
                // Désactiver le bouton précédemment sélectionné
                document.querySelectorAll('.chord-button.active').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                showChord(chordName, chord);
            });
            chordButtonsDiv.appendChild(button);
        });
    };

    const clearHighlights = () => {
        document.querySelectorAll('.chord-highlight').forEach(key => {
            key.classList.remove('chord-highlight', 'played-correct');
        });
        document.querySelectorAll('.finger-number').forEach(num => {
            num.remove();
        });
        currentChord = null;
        activeChordNotes.clear();
    };

    const showChord = (noteName, chord) => {
        clearHighlights();
        
        // Sauvegarder l'accord actuel
        currentChord = {
            root: noteName,
            type: chord.type,
            intervals: chord.intervals,
            notes: new Set()
        };

        // Calculer la note de base en MIDI
        const rootNote = noteNameToMidiNote(noteName + "4");
        
        // Ajouter chaque note de l'accord et jouer le son
        chord.intervals.forEach((interval, index) => {
            const noteMidi = rootNote + interval;
            const noteFullName = midiNoteToNoteName(noteMidi);
            currentChord.notes.add(noteFullName);
            
            const key = document.querySelector(`[data-note="${noteFullName}"]`);
            if (key) {
                key.classList.add('chord-highlight');
                
                const fingerNumber = document.createElement('div');
                fingerNumber.className = 'finger-number';
                fingerNumber.textContent = chord.fingers[index];
                key.appendChild(fingerNumber);

                // Jouer toutes les notes simultanément
                playSound(noteMidi, 100);
            }
        });
    };

    // Événements pour les changements de gamme
    scaleTypeSelect.addEventListener('change', updateChordButtons);
    scaleRootSelect.addEventListener('change', updateChordButtons);

    // Configuration initiale
    const keyboardLayout = [
        { note: 'C', black: false, width: 32 },
        { note: 'C#', black: true, width: 24 },
        { note: 'D', black: false, width: 32 },
        { note: 'D#', black: true, width: 24 },
        { note: 'E', black: false, width: 32 },
        { note: 'F', black: false, width: 32 },
        { note: 'F#', black: true, width: 24 },
        { note: 'G', black: false, width: 32 },
        { note: 'G#', black: true, width: 24 },
        { note: 'A', black: false, width: 32 },
        { note: 'A#', black: true, width: 24 },
        { note: 'B', black: false, width: 32 }
    ];
    const octaves = [3, 4, 5];
    let midiAccess = null;

    // Fonctions utilitaires pour les notes
    const highlightKey = (noteName) => {
        const keySelector = `.white-key[data-note="${noteName}"], .black-key[data-note="${noteName}"]`;
        const key = document.querySelector(keySelector);
        if (key) {
            key.classList.add('playing');
        }
    };

    const removeHighlightKey = (noteName) => {
        const keySelector = `.white-key[data-note="${noteName}"], .black-key[data-note="${noteName}"]`;
        const key = document.querySelector(keySelector);
        if (key) {
            key.classList.remove('playing');
        }
    };

    const playSound = (midiNote, velocity = 100) => {
        const noteName = midiNoteToNoteName(midiNote);
        if (pianoSounds[noteName]) {
            const audio = new Audio(pianoSounds[noteName]);
            // Augmentation du volume en gardant une plage dynamique
            const baseVolume = 0.7; // Volume de base plus élevé
            const velocityFactor = velocity / 127;
            audio.volume = Math.min(baseVolume + (velocityFactor * 0.3), 1.0);
            audio.play();
        }
    };

    const noteOn = (midiNote, velocity) => {
        const noteName = midiNoteToNoteName(midiNote);
        highlightKey(noteName);
        playSound(midiNote, velocity);
    };

    const noteOff = (midiNote) => {
        const noteName = midiNoteToNoteName(midiNote);
        removeHighlightKey(noteName);
    };

    // Gestion du MIDI
    const onMIDIMessage = (message) => {
        const data = message.data;
        const command = data[0] >> 4;
        const note = data[1];
        const velocity = data.length > 2 ? data[2] : 0;

        if (command === 9 && velocity > 0) {
            noteOn(note, velocity);
            
            // Vérifier si la note fait partie de l'accord actuel
            if (currentChord && currentChord.notes.has(midiNoteToNoteName(note))) {
                const key = document.querySelector(`[data-note="${midiNoteToNoteName(note)}"]`);
                if (key) {
                    key.classList.add('played-correct');
                    activeChordNotes.add(midiNoteToNoteName(note));
                    
                    // Vérifier si toutes les notes de l'accord sont jouées
                    if (activeChordNotes.size === currentChord.notes.size &&
                        [...activeChordNotes].every(note => currentChord.notes.has(note))) {
                        // Animation ou feedback pour accord complet
                        console.log('Accord complet !');
                    }
                }
            }
        } else if (command === 8 || (command === 9 && velocity === 0)) {
            noteOff(note);
            if (currentChord && currentChord.notes.has(midiNoteToNoteName(note))) {
                const key = document.querySelector(`[data-note="${midiNoteToNoteName(note)}"]`);
                if (key) {
                    key.classList.remove('played-correct');
                    activeChordNotes.delete(midiNoteToNoteName(note));
                }
            }
        }
    };

    const onMIDISuccess = (access) => {
        midiAccess = access;
        console.log("MIDI disponible");

        for (const input of midiAccess.inputs.values()) {
            input.onmidimessage = onMIDIMessage;
            console.log("MIDI Input:", input.name);
        }

        midiAccess.onstatechange = (event) => {
            const port = event.port;
            const portName = port.name || 'Port inconnu';
            console.log(`MIDI port ${portName} changé:`, port.state);
        };
    };

    const onMIDIFailure = () => {
        console.error("Impossible d'accéder au MIDI");
    };

    const requestMIDIAccess = () => {
        if (navigator.requestMIDIAccess) {
            navigator.requestMIDIAccess()
                .then(onMIDISuccess)
                .catch(onMIDIFailure);
        } else {
            console.error("MIDI n'est pas supporté dans ce navigateur");
        }
    };

    const createPianoKey = (keyInfo, octave) => {
        const key = document.createElement('div');
        const isBlack = keyInfo.black;
        key.className = isBlack ? 'black-key' : 'white-key';
        key.dataset.note = `${keyInfo.note}${octave}`;

        // Ajout du nom de la note
        const noteName = document.createElement('div');
        noteName.className = 'note-name';
        noteName.textContent = keyInfo.note;
        key.appendChild(noteName);

        // Gestion des événements de la souris
        key.addEventListener('mousedown', () => {
            const midiNote = noteNameToMidiNote(key.dataset.note);
            noteOn(midiNote, 100);
        });

        key.addEventListener('mouseup', () => {
            const midiNote = noteNameToMidiNote(key.dataset.note);
            noteOff(midiNote);
        });

        key.addEventListener('mouseleave', () => {
            const midiNote = noteNameToMidiNote(key.dataset.note);
            noteOff(midiNote);
        });

        return key;
    };

    const generateVirtualKeyboard = () => {
        pianoDiv.innerHTML = '';
        octaves.forEach(octave => {
            const octaveDiv = document.createElement('div');
            octaveDiv.className = 'octave';
            octaveDiv.id = `octave-${octave}`;
            
            keyboardLayout.forEach(keyInfo => {
                const keyElement = createPianoKey(keyInfo, octave);
                octaveDiv.appendChild(keyElement);
            });
            
            pianoDiv.appendChild(octaveDiv);
        });
    };

    // Chargement des sons de piano
    const loadPianoSounds = () => {
        const notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        octaves.forEach(octave => {
            notes.forEach(note => {
                let fileName = note;
                if (note.includes('#')) {
                    const flatNotes = {'C#': 'Db', 'D#': 'Eb', 'F#': 'Gb', 'G#': 'Ab', 'A#': 'Bb'};
                    fileName = flatNotes[note];
                }
                const soundPath = `piano-mp3/${fileName}${octave}.mp3`;
                pianoSounds[`${note}${octave}`] = soundPath;
            });
        });
    };

    // Métronome
    const metronomeToggle = document.getElementById('metronome-toggle');
    const bpmInput = document.getElementById('bpm');
    const bpmValue = document.getElementById('bpm-value');
    const volumeControl = document.getElementById('metronome-volume');
    const volumeValue = document.getElementById('volume-value');
    const beatDots = document.querySelectorAll('.beat-dot');
    let metronomeInterval = null;
    let isPlaying = false;
    let currentBeat = 0;
    let audioContext = null;
    let metronomeVolume = 0.3;

    const initAudioContext = () => {
        if (!audioContext) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        }
    };

    const updateVolume = () => {
        metronomeVolume = volumeControl.value / 100;
        volumeValue.textContent = `${volumeControl.value}%`;
    };

    const playTick = (frequency = 1000, duration = 0.025, volumeMultiplier = 1.0) => {
        if (!audioContext) return;
        
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.type = 'sine';
        oscillator.frequency.value = frequency;
        gainNode.gain.value = metronomeVolume * volumeMultiplier;
        
        oscillator.start();
        oscillator.stop(audioContext.currentTime + duration);
    };

    const updateBeatDisplay = (beat) => {
        beatDots.forEach(dot => dot.classList.remove('active'));
        beatDots[beat].classList.add('active');
    };

    const playBeat = () => {
        const isFirstBeat = currentBeat === 0;
        playTick(
            isFirstBeat ? 1200 : 800,  // Fréquence
            0.025,                     // Durée
            isFirstBeat ? 1 : 0.7      // Multiplicateur de volume
        );
        updateBeatDisplay(currentBeat);
        currentBeat = (currentBeat + 1) % beatDots.length;
    };

    const toggleMetronome = () => {
        if (isPlaying) {
            clearInterval(metronomeInterval);
            metronomeToggle.textContent = 'Démarrer';
            metronomeToggle.classList.remove('active');
            beatDots.forEach(dot => dot.classList.remove('active'));
            isPlaying = false;
        } else {
            initAudioContext();
            const bpm = parseInt(bpmInput.value);
            const interval = (60 / bpm) * 1000;
            
            currentBeat = 0;
            playBeat();
            
            metronomeInterval = setInterval(playBeat, interval);
            metronomeToggle.textContent = 'Arrêter';
            metronomeToggle.classList.add('active');
            isPlaying = true;
        }
    };

    const updateBPM = () => {
        const bpm = parseInt(bpmInput.value);
        bpmValue.textContent = bpm;
        
        if (isPlaying) {
            clearInterval(metronomeInterval);
            const interval = (60 / bpm) * 1000;
            metronomeInterval = setInterval(playBeat, interval);
        }
    };

    // Événements du métronome
    metronomeToggle.addEventListener('click', toggleMetronome);
    bpmInput.addEventListener('input', updateBPM);
    volumeControl.addEventListener('input', updateVolume);

    // Raccourci clavier pour le métronome (espace)
    document.addEventListener('keydown', (e) => {
        if (e.code === 'Space' && document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
            e.preventDefault();
            toggleMetronome();
        }
    });

    // Initialisation
    loadPianoSounds();
    generateVirtualKeyboard();
    requestMIDIAccess();
    updateChordButtons();  // Afficher les accords de la gamme majeure par défaut
});